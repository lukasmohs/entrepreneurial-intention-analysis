agePreds3=(ageModel %>% predict(person3, type="response"))
summary(agePreds3)
lr <- glm(dead~age+alk.phos+hepato+protime,
family=binomial(link="logit"),data = data)
deviancepercentage(lr, data)
library(vegan)
install.packages(c("vegan"))
library(vegan)
library(vegan)
deviancepercentage(lr, data)
install.packages(c("BiodiversityR"))
install.packages(c("BiodiversityR"))
library(vegan)
knitr::opts_chunk$set(echo = TRUE)
deviancepercentage(lr, data)
age = 50
alk.phos = 1000
hepato = 1
protime = 10
person = data.frame(age,alk.phos,hepato,protime)
lr=glm(dead~age+alk.phos+hepato+protime,
family=binomial(link="logit"),data = data)
preds=(lr %>% predict(person, type="response"))
library(dplyr)
library(dplyr)
library(survival)
library(vegan)
data = pbc %>% tbl_df()
data = data %>% filter(!is.na(trt))
data <- data %>% mutate(dead=as.numeric(status==2))
age = 50
alk.phos = 1000
hepato = 1
protime = 10
person = data.frame(age,alk.phos,hepato,protime)
lr=glm(dead~age+alk.phos+hepato+protime,
family=binomial(link="logit"),data = data)
preds=(lr %>% predict(person, type="response"))
summary(preds)
prob = preds[1]
prob
odds <- preds[1] / (1-preds[1])
deviancepercentage(lr, data)
(preds[1]*100)  %>% paste(" probability of death", sep="% ")
newAge <- 60
newHepato <- 0
newAlk.phos <- 1500
newProtime <- 12
points <-0
points <- points + signif(lr$coefficients["age"]/smallest,digits=2)*(newAge-age)
points <- points + signif(lr$coefficients["hepato"]/smallest,digits=2)*(newHepato-hepato)
points <- points + signif(lr$coefficients["alk.phos"]/smallest,digits=2)*(newAlk.phos-alk.phos)
points <- points + signif(lr$coefficients["protime"]/smallest,digits=2)*(newProtime-protime)
points
newOdds <- points/(1/smallest)
newOdds
newProb = newOdds/(newOdds+1)
newProb
newProb = newOdds/(newOdds+1)*100
newProb
cat("Hello")
1/0.22
NTT <- 5
(420.12-315.79)/315.79)
(420.12-315.79)/315.79
(420.12-319.79)/315.79
(420.12-315.79)/315.79
(370-255)/255
(420.12-370.79)/370
(420.12-315.79)/315.79*100
age = 50
alk.phos = 1000
hepato = 1
protime = 10
person = data.frame(age,alk.phos,hepato,protime)
lr=glm(dead~age+alk.phos+hepato+protime,
family=binomial(link="logit"),data = data)
preds=(lr %>% predict(person, type="response"))
summary(preds)
prob = preds[1]
prob
odds <- preds[1] / (1-preds[1])
odds
glm(dead~age+alk.phos+hepato+protime,
family=binomial(link="logit"),data = data) %>% summary()
age = 50
alk.phos = 1000
hepato = 1
protime = 10
person = data.frame(age,alk.phos,hepato,protime)
lr=glm(dead~age+alk.phos+hepato+protime,
family=binomial(link="logit"),data = data)
preds=(lr %>% predict(person, type="response"))
summary(preds)
prob = preds[1]
prob
odds <- preds[1] / (1-preds[1])
odds
(preds[1]*100)  %>% paste(" probability of death", sep="% ")
smallest <- 9999999
length <- length(lr$coefficients)
for (val in 1:length) {
if( val != 1 && lr$coefficients[val] < smallest)  {
smallest <- lr$coefficients[val]
}
}
newAge <- 60
newHepato <- 0
newAlk.phos <- 1500
newProtime <- 12
points <-0
points <- points + signif(lr$coefficients["age"]/smallest,digits=2)*(newAge-age)
points <- points + signif(lr$coefficients["hepato"]/smallest,digits=2)*(newHepato-hepato)
points <- points + signif(lr$coefficients["alk.phos"]/smallest,digits=2)*(newAlk.phos-alk.phos)
points <- points + signif(lr$coefficients["protime"]/smallest,digits=2)*(newProtime-protime)
points
newOdds <- points/(1/smallest)
newOdds
newProb = newOdds/(newOdds+1)*100
newProb
data <- read.csv("features.csv")
library(vegan)
library(vegan)
library(survival)
library(bnlearn)
library(dplyr)
library(ggplot2)
library(lattice)
library(mice)
library(ROCR)
library(tableone)
library(caret)
library(rpart)
library(e1071)
data <- read.csv("features.csv")
data <- read.csv("features.csv")
data
dataTrain = data[seq(1,nrow(data),2),]
dataTest = data[seq(2,nrow(data),2),]
tanTrain <- dataTrain[ ,sapply(dataTrain, is.factor)]
tanTest <- dataTest[ ,sapply(dataTest, is.factor)]
nb = naiveBayes(truth~.,dataTrain)
nb = naiveBayes(truePosition~.,dataTrain)
bayesAccuracy <- sum(predict(nb, dataTest)==dataTest$truePosition) / nrow(dataTest)
bayesPredictedProbabilities <- predict(nb, dataTest,"raw")
bayesPred <- prediction( bayesPredictedProbabilities[,2], dataTest$truePosition)
bayesPerfROC <- performance(bayesPred,"tpr","fpr")
############## Naive Bayes   ##############
nb = naiveBayes(truePosition~.,dataTrain)
bayesAccuracy <- sum(predict(nb, dataTest)==dataTest$truePosition) / nrow(dataTest)
bayesPredictedProbabilities <- predict(nb, dataTest,"raw")
bayesPred <- prediction( bayesPredictedProbabilities[,2], dataTest$truePosition)
bayesPred <- prediction( bayesPredictedProbabilities[,2], dataTest$truePosition)
bayesPred <- prediction( bayesPredictedProbabilities[,2], dataTest$truePosition)
nb = naiveBayes(truePosition~.,dataTrain)
bayesAccuracy <- sum(predict(nb, dataTest)==dataTest$truePosition) / nrow(dataTest)
bayesPredictedProbabilities <- predict(nb, dataTest,"raw")
bayesPred <- prediction( bayesPredictedProbabilities[,2], dataTest$truePosition)
unload(ROCR)
library.unload(ROCR)
library(vegan)
library(survival)
library(bnlearn)
library(dplyr)
library(ggplot2)
library(lattice)
library(mice)
library(tableone)
library(caret)
library(rpart)
library(e1071)
bayesPred <- prediction( bayesPredictedProbabilities[,2], dataTest$truePosition)
tan = tree.bayes(tanTrain, "truePosition")
fittedTan = bn.fit(tan, tanTrain)
tan = tree.bayes(tanTrain, "truePosition")
fittedTan = bn.fit(tan, tanTrain)
tanAccuracy <- (sum(predict(object=fittedTan, data=tanTest)==tanTest$truePosition)) / nrow(tanTest)
tan = tree.bayes(data.frame(tanTrain), "truePosition")
tree <- rpart(truePosition~ .,
data=dataTrain,
method="class")
dtAccuracy <- (sum(predict(tree, dataTest, type="class")==dataTest$truePosition)) / nrow(dataTest)
dtPredictedProbabilities <- predict(tree, dataTest, type = "prob")
dtPred <- prediction( dtPredictedProbabilities[,2], dataTest$truePosition)
View(dtPredictedProbabilities)
nb = naiveBayes(truePosition~.,dataTrain)
bayesAccuracy <- sum(predict(nb, dataTest)==dataTest$truePosition) / nrow(dataTest)
predict(nb, dataTest)
dataTest
nb = naiveBayes(truePosition~.,dataTrain)
bayesAccuracy <- sum(predict(nb, dataTest)==dataTest$truePosition) / nrow(dataTest)
bayesAccuracy
predict(nb, dataTest)
dataTest
nb
predict(nb, data)
dataTest$truePosition
dataTrain$truePosition
sum(predict(nb, dataTest)==dataTest$truePosition)
sum(predict(nb, dataTest)==1)
sum(predict(nb, dataTest)==2)
sum(predict(nb, dataTest)==3)
sum(predict(nb, dataTest)==4)
sum(predict(nb, dataTest)==5)
sum(predict(nb, dataTest)==6)
sum(predict(nb, dataTest)==7)
sum(predict(nb, dataTest)==0)
sum(predict(nb, dataTest))
data <- read.csv("features.csv")
data
data$truePosition <- as.factor(data$truePosition)
dataTrain = data[seq(1,nrow(data),2),]
dataTest = data[seq(2,nrow(data),2),]
tanTrain <- dataTrain[ ,sapply(dataTrain, is.factor)]
tanTest <- dataTest[ ,sapply(dataTest, is.factor)]
nb = naiveBayes(truePosition~.,dataTrain)
bayesAccuracy <- sum(predict(nb, dataTest)==dataTest$truePosition) / nrow(dataTest)
bayesPredictedProbabilities <- predict(nb, dataTest,"raw")
bayesAccuracy
bayesPred <- prediction( bayesPredictedProbabilities[,2], dataTest$truePosition)
bayesPredictedProbabilities <- predict(nb, dataTest,"raw")
tan = tree.bayes(tanTrain, "truePosition")
data <- read.csv("features.csv")
data
data$truePosition <- as.factor(data$truePosition)
dataTrain <- dataTrain[-c(which( colnames(dataTest)=="id"))]
dataTrain = data[seq(1,nrow(data),2),]
dataTest = data[seq(2,nrow(data),2),]
tanTrain <- dataTrain[ ,sapply(dataTrain, is.factor)]
tanTest <- dataTest[ ,sapply(dataTest, is.factor)]
nb = naiveBayes(truePosition~.,dataTrain)
bayesAccuracy <- sum(predict(nb, dataTest)==dataTest$truePosition) / nrow(dataTest)
bayesPredictedProbabilities <- predict(nb, dataTest,"raw")
bayesPred <- prediction( bayesPredictedProbabilities[,2], dataTest$truePosition)
tan = tree.bayes(tanTrain, "truePosition")
dataTrain
data <- read.csv("features.csv")
data
data$truePosition <- as.factor(data$truePosition)
data <- data[-c(which( colnames(dataTest)=="id"))]
dataTrain = data[seq(1,nrow(data),2),]
dataTest = data[seq(2,nrow(data),2),]
tanTrain <- dataTrain[ ,sapply(dataTrain, is.factor)]
tanTest <- dataTest[ ,sapply(dataTest, is.factor)]
nb = naiveBayes(truePosition~.,dataTrain)
bayesAccuracy <- sum(predict(nb, dataTest)==dataTest$truePosition) / nrow(dataTest)
bayesPredictedProbabilities <- predict(nb, dataTest,"raw")
tan = tree.bayes(tanTrain, "truePosition")
fittedTan = bn.fit(tan, tanTrain)
tree <- rpart(truePosition~ .,
data=dataTrain,
method="class")
dtAccuracy <- (sum(predict(tree, dataTest, type="class")==dataTest$truePosition)) / nrow(dataTest)
dtPredictedProbabilities <- predict(tree, dataTest, type = "prob")
dtAccuracy
tanAccuracy <- (sum(predict(object=fittedTan, data=tanTest)==tanTest$truePosition)) / nrow(tanTest)
tan = tree.bayes(tanTrain, "truePosition")
n <- nrow(dataTest)
dtAccuracyInCI <-  paste(toString(dtAccuracy-1.96*sqrt(dtAccuracy*(1-dtAccuracy)/n)),
toString(dtAccuracy+1.96*sqrt(dtAccuracy*(1-dtAccuracy)/n)),sep="; ")
tanAccuracyInCI <- paste(toString(tanAccuracy-1.96*sqrt(tanAccuracy*(1-tanAccuracy)/n)),
toString(tanAccuracy+1.96*sqrt(tanAccuracy*(1-tanAccuracy)/n)), sep="; ")
bayesAccuracyInCI <- paste(toString(bayesAccuracy-1.96*sqrt(bayesAccuracy*(1-bayesAccuracy)/n)),
toString(bayesAccuracy+1.96*sqrt(bayesAccuracy*(1-bayesAccuracy)/n)), sep="; ")
accuracyComparisonMatrix <- matrix(c(dtAccuracyInCI,lrAccuracyInCI,tanAccuracyInCI,bayesAccuracyInCI),ncol=4,byrow=TRUE)
accuracyComparisonMatrix <- matrix(c(dtAccuracyInCI,tanAccuracyInCI,bayesAccuracyInCI),ncol=4,byrow=TRUE)
colnames(accuracyComparisonMatrix) <- c("Decision Tree", "Tree Augmented Naive Bayes", "Naive Bayes")
rownames(accuracyComparisonMatrix) <- c("Accuracy")
accuracyComparisonMatrix <- matrix(c(dtAccuracyInCI,tanAccuracyInCI,bayesAccuracyInCI),ncol=4,byrow=TRUE)
fittedTan = bn.fit(tan, tanTrain)
tan = tree.bayes(tanTrain, "truePosition")
tanTrain <- dataTrain[ ,sapply(dataTrain, is.factor)]
tanTest <- dataTest[ ,sapply(dataTest, is.factor)]
tan = tree.bayes(tanTrain, "truePosition")
tanTrain
dataTrain
tan = tree.bayes(dataTrain, "truePosition")
nb = naiveBayes(truePosition~.,dataTrain)
bayesAccuracy <- sum(predict(nb, dataTest)==dataTest$truePosition) / nrow(dataTest)
tree <- rpart(truePosition~ .,
data=dataTrain,
method="class")
dtAccuracy <- (sum(predict(tree, dataTest, type="class")==dataTest$truePosition)) / nrow(dataTest)
n <- nrow(dataTest)
dtAccuracyInCI <-  paste(toString(dtAccuracy-1.96*sqrt(dtAccuracy*(1-dtAccuracy)/n)),
toString(dtAccuracy+1.96*sqrt(dtAccuracy*(1-dtAccuracy)/n)),sep="; ")
bayesAccuracyInCI <- paste(toString(bayesAccuracy-1.96*sqrt(bayesAccuracy*(1-bayesAccuracy)/n)),
toString(bayesAccuracy+1.96*sqrt(bayesAccuracy*(1-bayesAccuracy)/n)), sep="; ")
accuracyComparisonMatrix <- matrix(c(dtAccuracyInCI,bayesAccuracyInCI),ncol=4,byrow=TRUE)
colnames(accuracyComparisonMatrix) <- c("Decision Tree", "Naive Bayes")
rownames(accuracyComparisonMatrix) <- c("Accuracy")
accuracyComparisonTable <- as.table(accuracyComparisonMatrix)
accuracyComparisonTable
accuracyComparisonMatrix <- matrix(c(dtAccuracyInCI,bayesAccuracyInCI),ncol=3,byrow=TRUE)
accuracyComparisonMatrix <- matrix(c(dtAccuracyInCI,bayesAccuracyInCI),ncol=2,byrow=TRUE)
colnames(accuracyComparisonMatrix) <- c("Decision Tree", "Naive Bayes")
rownames(accuracyComparisonMatrix) <- c("Accuracy")
accuracyComparisonTable <- as.table(accuracyComparisonMatrix)
accuracyComparisonTable
n <- nrow(dataTest)
dtAccuracyInCI <-  toString(dtAccuracy)
bayesAccuracyInCI <- toString(bayesAccuracy)
accuracyComparisonMatrix <- matrix(c(dtAccuracyInCI,bayesAccuracyInCI),ncol=2,byrow=TRUE)
colnames(accuracyComparisonMatrix) <- c("Decision Tree", "Naive Bayes")
rownames(accuracyComparisonMatrix) <- c("Accuracy")
accuracyComparisonTable <- as.table(accuracyComparisonMatrix)
accuracyComparisonTable
data <- read.csv("features.csv")
data
data$truePosition <- as.factor(data$truePosition)
data <- data[-c(which( colnames(dataTest)=="id"))]
dataTrain = data[seq(1,nrow(data),2),]
dataTest = data[seq(2,nrow(data),2),]
tanTrain <- dataTrain[ ,sapply(dataTrain, is.factor)]
tanTest <- dataTest[ ,sapply(dataTest, is.factor)]
nb = naiveBayes(truePosition~.,dataTrain)
data <- read.csv("features.csv")
data
data$truePosition <- as.factor(data$truePosition)
data <- data[-c(which( colnames(dataTest)=="id"))]
dataTrain = data[seq(1,nrow(data),2),]
dataTest = data[seq(2,nrow(data),2),]
tanTrain <- dataTrain[ ,sapply(dataTrain, is.factor)]
nb = naiveBayes(truePosition~.,dataTrain)
nb = naiveBayes(truePosition ~ . ,dataTrain)
nb = naiveBayes(truePosition ~ . , data = dataTrain)
data <- read.csv("features.csv")
data
data$truePosition <- as.factor(data$truePosition)
data <- data[-c(which( colnames(dataTest)=="id"))]
data <- data[-c(which( colnames(data)=="id"))]
dataTrain = data[seq(1,nrow(data),2),]
dataTest = data[seq(2,nrow(data),2),]
nb = naiveBayes(truePosition ~ . , dataTrain)
bayesAccuracy <- sum(predict(nb, dataTest)==dataTest$truePosition) / nrow(dataTest)
tree <- rpart(truePosition~ .,
data=dataTrain,
method="class")
dtAccuracy <- (sum(predict(tree, dataTest, type="class")==dataTest$truePosition)) / nrow(dataTest)
n <- nrow(dataTest)
dtAccuracyInCI <-  toString(dtAccuracy)
bayesAccuracyInCI <- toString(bayesAccuracy)
accuracyComparisonMatrix <- matrix(c(dtAccuracyInCI,bayesAccuracyInCI),ncol=2,byrow=TRUE)
colnames(accuracyComparisonMatrix) <- c("Decision Tree", "Naive Bayes")
rownames(accuracyComparisonMatrix) <- c("Accuracy")
accuracyComparisonTable <- as.table(accuracyComparisonMatrix)
accuracyComparisonTable
bn
nb
sumary(nb)
summary(nb)
setwd("../Dropbox/CMU/ML/week\ 15/obgyn_sample_cases//")
setwd("../Dropbox/CMU/ML/week 15/obgyn_sample_cases//")
setwd("../Dropbox/CMU/ML/week 15/obgyn_sample_cases/")
setwd("../Dropbox/CMU/ML/week\ 15/obgyn_sample_cases/")
setwd("Users/lukasmohs/Dropbox/CMU/ML/week\ 15/obgyn_sample_cases/")
setwd("Users/lukasmohs/Dropbox/CMU/ML/week 15/obgyn_sample_cases/")
library(dplyr)
library(car)
# Modeling Random to test
#data <- mutate(data, new = round(rnorm(66,4,2.75)))
#data <- mutate(data, new =  ifelse(new <  1, 1,new))
#data <- mutate(data, new =  ifelse(new >  7, 7,new))
#plot(data$EI,data$newSN)
#abline(lm(data$EI ~ data$new))
#fit=lm(EI ~ new, data=data)
#summary(fit)
########   SETTINGS    #############
setwd("/Users/lukasmohs/Desktop/Innovation-Analysis/") #adjust to directiory
data = read.csv("cleaned-responses.csv",sep=';')
summary(data)
data <- mutate(data, ATB = (X11a+X11b+X11c+X11d+X11e)/5)
data <- mutate(data, SN = (X13a+X13b+X13c)/3)
data <- mutate(data, PBC = (X15a + X15b + X15c + X15d + X15e + X15f)/6)
data <- mutate(data, EI = (X18a + X18b + X18c + X18d + X18e + X18f)/6)
data <- mutate(data, SEBA = ifelse(Attended.SEBA == 'yes', 1, 0))
data <- mutate(data, Entrepreneur = ifelse(Already.Entrepreneur == 'yes', 1, 0))
########    EFFECT OF EI on ACTION    #############
#Modeling effect of IE on Entrepreneur
fitIEonEntrpreneur <- lm(Entrepreneur ~ EI, data=data)
summary(fitIEonEntrpreneur)
########    EFFECT OF SEBA    #############
#Modeling effect of SEBA on IE
fitSEBAonEI <- lm(EI ~ SEBA, data=data)
summary(fitSEBAonEI)
plot(data$SEBA, data$EI, axes=FALSE, main="SEBA vs. EI",
xlab="SEBA ", ylab="EI", pch=19)
axis(side=1, at=c(0:1))
axis(side=2, at=c(1:7))
abline(fitSEBAonEI, col="red")
#Modeling effect of SEBA on ATB
fitATB <- lm(ATB ~ SEBA, data=data)
summary(fitATB)
plot(data$SEBA, data$ATB, axes=FALSE, main="SEBA vs. ATB",
xlab="SEBA ", ylab="ATB", pch=19)
axis(side=1, at=c(0:1))
axis(side=2, at=c(1:7))
abline(fitATB, col="red")
#Modeling effect of SEBA on SN
fitSN <- lm(SN ~ SEBA, data=data)
summary(fitSN)
plot(data$SEBA, data$SN, axes=FALSE, main="SEBA vs. SN",
xlab="SEBA ", ylab="SN", pch=19)
axis(side=1, at=c(0:1))
axis(side=2, at=c(1:7))
abline(fitSN, col="red")
#Modeling effect of SEBA on PBC
fitPBC <- lm(PBC ~ SEBA, data=data)
summary(fitPBC)
plot(data$SEBA, data$PBC, axes=FALSE, main="SEBA vs. PBC",
xlab="SEBA ", ylab="PBC", pch=19)
axis(side=1, at=c(0:1))
axis(side=2, at=c(1:7))
abline(fitPBC, col="red")
########    EFFECT OF AJZEN ANTECEDENT    #############
#Modeling effect of Ajzens antecedents on IE
fitAjzen <- lm(EI ~ ATB + SN + PBC, data=data)
summary(fitAjzen)
#plot(fitAjzen)
#Plot effect of ATB on EI
plot(data$ATB,data$EI,  main="EI vs. ATB",
xlab="ATB ", ylab="EI", pch=19)
abline(lm(EI ~ ATB, data = data), col="red")
#Plot effect of SN on EI
plot(data$SN,data$EI,  main="EI vs. SN",
xlab="SN ", ylab="EI", pch=19)
abline(lm(EI ~ SN, data = data), col="red")
#Plot effect of PBC on EI
plot(data$PBC,data$EI,  main="EI vs. PBC",
xlab="PBC ", ylab="EI", pch=19)
abline(lm(EI ~ PBC, data = data), col="red")
fitATB <- lm(ATB ~ SEBA, data=data)
summary(fitATB)
plot(data$SEBA, data$ATB, axes=FALSE, main="SEBA vs. ATB",
xlab="SEBA ", ylab="ATB", pch=19)
axis(side=1, at=c(0:1))
axis(side=2, at=c(1:7))
abline(fitATB, col="red")
plot(data$ATB,data$EI,  main="EI vs. ATB",
xlab="ATB ", ylab="EI", pch=19)
abline(lm(EI ~ ATB, data = data), col="red")
plot(data$PBC,data$EI,  main="EI vs. PBC",
xlab="PBC ", ylab="EI", pch=19)
abline(lm(EI ~ PBC, data = data), col="red")
plot(data$PBC,data$EI,  main="EI vs. PBC", axes=FALSE,
xlab="PBC ", ylab="EI", pch=19)
axis(side=2, at=c(1:7))
abline(lm(EI ~ PBC, data = data), col="red")
plot(data$SN,data$EI,  main="EI vs. SN",
xlab="SN ", ylab="EI", pch=19)
abline(lm(EI ~ SN, data = data), col="red")
plot(data$PBC,data$EI,  main="EI vs. PBC", axes=FALSE,
xlab="PBC ", ylab="EI", pch=19)
axis(side=1, at=c(1:7))
axis(side=2, at=c(1:7))
abline(lm(EI ~ PBC, data = data), col="red")
plot(data$SN,data$EI,  main="EI vs. SN",
xlab="SN ", ylab="EI", pch=19)
plot(data$SN,data$EI,  main="EI vs. SN",
xlab="SN ", ylab="EI", pch=19)
abline(lm(EI ~ SN, data = data), col="red")
plot(data$PBC,data$EI,  main="EI vs. PBC", axes=FALSE,
xlab="PBC ", ylab="EI", pch=19)
axis(side=1, at=c(1:8))
axis(side=2, at=c(1:8))
abline(lm(EI ~ PBC, data = data), col="red")
plot(data$PBC,data$EI,  main="EI vs. PBC", axes=FALSE,
xlab="PBC ", ylab="EI", pch=19)
axis(side=1, at=c(1:8))
axis(side=2, at=c(1:8))
plot(data$PBC,data$EI,  main="EI vs. PBC", axes=FALSE,
xlab="PBC ", ylab="EI", pch=19)
axis(side=2, at=c(1:7))
axis(side=1, at=c(1:7))
abline(lm(EI ~ PBC, data = data), col="red")
fitPBC <- lm(PBC ~ SEBA, data=data)
summary(fitPBC)
plot(data$SEBA, data$PBC, axes=FALSE, main="SEBA vs. PBC",
xlab="SEBA ", ylab="PBC", pch=19)
axis(side=1, at=c(0:1))
axis(side=2, at=c(1:7))
abline(fitPBC, col="red")
fitAjzen <- lm(EI ~ ATB + SN + PBC, data=data)
summary(fitAjzen)
plot(data$ATB,data$EI,  main="EI vs. ATB",
xlab="ATB ", ylab="EI", pch=19)
abline(lm(EI ~ ATB, data = data), col="red")
plot(data$SN,data$EI,  main="EI vs. SN",
xlab="SN ", ylab="EI", pch=19)
abline(lm(EI ~ SN, data = data), col="red")
plot(data$PBC,data$EI,  main="EI vs. PBC", axes=FALSE,
xlab="PBC ", ylab="EI", pch=19)
axis(side=2, at=c(1:7))
axis(side=1, at=c(1:7))
plot(data$PBC,data$EI,  main="EI vs. PBC",
xlab="PBC ", ylab="EI", pch=19)
abline(lm(EI ~ PBC, data = data), col="red")
plot(data$SN,data$EI,  main="EI vs. SN",
xlab="SN ", ylab="EI", pch=19)
abline(lm(EI ~ SN, data = data), col="red")
plot(data$PBC,data$EI,  main="EI vs. PBC",
xlab="PBC ", ylab="EI", pch=19)
abline(lm(EI ~ PBC, data = data), col="red")
plot(data$PBC,data$EI,  main="EI vs. PBC",
xlab="PBC ", ylab="EI", pch=19)
abline(lm(EI ~ PBC, data = data), col="red")
plot(data$SN,data$EI,  main="EI vs. SN",
xlab="SN ", ylab="EI", pch=19)
abline(lm(EI ~ SN, data = data), col="red")
plot(data$PBC,data$EI,  main="EI vs. PBC",
xlab="PBC ", ylab="EI", pch=19)
abline(lm(EI ~ PBC, data = data), col="red")
