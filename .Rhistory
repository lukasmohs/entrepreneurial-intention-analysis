numberTrt <- data %>% count(trt)
percentDeadPlacebo <- 60/154
percentDeadPlacebo
percentDeadTrt <- 65/158
percentDeadTrt
ATE <- 1 - percentDeadTrt/percentDeadPlacebo#=-0.05590717
ATE
glm(dead ~ trt,
family=binomial(link="logit"),
data = data) %>% summary()
glm(dead ~  bili+chol+albumin+copper+alk.phos+ast+trig+platelet+protime+stage,family=binomial(link="logit"),data = data) %>% summary()
glm(dead~age+alk.phos+ascites+hepato+protime,family=binomial(link="logit"),data = data) %>% summary()
glm(dead~age+alk.phos+hepato+protime,
family=binomial(link="logit"),data = data) %>% summary()
(1-(419.97/420.12))*100
(1-(255.70/371.98))*100
summary(agePreds1)
age=60
person2 = data.frame(age)
agePreds2=(ageModel %>% predict(person2, type="response"))
summary(agePreds2)
age=70
person3 = data.frame(age)
agePreds3=(ageModel %>% predict(person3, type="response"))
summary(agePreds3)
lr <- glm(dead~age+alk.phos+hepato+protime,
family=binomial(link="logit"),data = data)
deviancepercentage(lr, data)
library(vegan)
install.packages(c("vegan"))
library(vegan)
library(vegan)
deviancepercentage(lr, data)
install.packages(c("BiodiversityR"))
install.packages(c("BiodiversityR"))
library(vegan)
knitr::opts_chunk$set(echo = TRUE)
deviancepercentage(lr, data)
age = 50
alk.phos = 1000
hepato = 1
protime = 10
person = data.frame(age,alk.phos,hepato,protime)
lr=glm(dead~age+alk.phos+hepato+protime,
family=binomial(link="logit"),data = data)
preds=(lr %>% predict(person, type="response"))
library(dplyr)
library(dplyr)
library(survival)
library(vegan)
data = pbc %>% tbl_df()
data = data %>% filter(!is.na(trt))
data <- data %>% mutate(dead=as.numeric(status==2))
age = 50
alk.phos = 1000
hepato = 1
protime = 10
person = data.frame(age,alk.phos,hepato,protime)
lr=glm(dead~age+alk.phos+hepato+protime,
family=binomial(link="logit"),data = data)
preds=(lr %>% predict(person, type="response"))
summary(preds)
prob = preds[1]
prob
odds <- preds[1] / (1-preds[1])
deviancepercentage(lr, data)
(preds[1]*100)  %>% paste(" probability of death", sep="% ")
newAge <- 60
newHepato <- 0
newAlk.phos <- 1500
newProtime <- 12
points <-0
points <- points + signif(lr$coefficients["age"]/smallest,digits=2)*(newAge-age)
points <- points + signif(lr$coefficients["hepato"]/smallest,digits=2)*(newHepato-hepato)
points <- points + signif(lr$coefficients["alk.phos"]/smallest,digits=2)*(newAlk.phos-alk.phos)
points <- points + signif(lr$coefficients["protime"]/smallest,digits=2)*(newProtime-protime)
points
newOdds <- points/(1/smallest)
newOdds
newProb = newOdds/(newOdds+1)
newProb
newProb = newOdds/(newOdds+1)*100
newProb
cat("Hello")
1/0.22
NTT <- 5
(420.12-315.79)/315.79)
(420.12-315.79)/315.79
(420.12-319.79)/315.79
(420.12-315.79)/315.79
(370-255)/255
(420.12-370.79)/370
(420.12-315.79)/315.79*100
age = 50
alk.phos = 1000
hepato = 1
protime = 10
person = data.frame(age,alk.phos,hepato,protime)
lr=glm(dead~age+alk.phos+hepato+protime,
family=binomial(link="logit"),data = data)
preds=(lr %>% predict(person, type="response"))
summary(preds)
prob = preds[1]
prob
odds <- preds[1] / (1-preds[1])
odds
glm(dead~age+alk.phos+hepato+protime,
family=binomial(link="logit"),data = data) %>% summary()
age = 50
alk.phos = 1000
hepato = 1
protime = 10
person = data.frame(age,alk.phos,hepato,protime)
lr=glm(dead~age+alk.phos+hepato+protime,
family=binomial(link="logit"),data = data)
preds=(lr %>% predict(person, type="response"))
summary(preds)
prob = preds[1]
prob
odds <- preds[1] / (1-preds[1])
odds
(preds[1]*100)  %>% paste(" probability of death", sep="% ")
smallest <- 9999999
length <- length(lr$coefficients)
for (val in 1:length) {
if( val != 1 && lr$coefficients[val] < smallest)  {
smallest <- lr$coefficients[val]
}
}
newAge <- 60
newHepato <- 0
newAlk.phos <- 1500
newProtime <- 12
points <-0
points <- points + signif(lr$coefficients["age"]/smallest,digits=2)*(newAge-age)
points <- points + signif(lr$coefficients["hepato"]/smallest,digits=2)*(newHepato-hepato)
points <- points + signif(lr$coefficients["alk.phos"]/smallest,digits=2)*(newAlk.phos-alk.phos)
points <- points + signif(lr$coefficients["protime"]/smallest,digits=2)*(newProtime-protime)
points
newOdds <- points/(1/smallest)
newOdds
newProb = newOdds/(newOdds+1)*100
newProb
data <- read.csv("features.csv")
library(vegan)
library(vegan)
library(survival)
library(bnlearn)
library(dplyr)
library(ggplot2)
library(lattice)
library(mice)
library(ROCR)
library(tableone)
library(caret)
library(rpart)
library(e1071)
data <- read.csv("features.csv")
data <- read.csv("features.csv")
data
dataTrain = data[seq(1,nrow(data),2),]
dataTest = data[seq(2,nrow(data),2),]
tanTrain <- dataTrain[ ,sapply(dataTrain, is.factor)]
tanTest <- dataTest[ ,sapply(dataTest, is.factor)]
nb = naiveBayes(truth~.,dataTrain)
nb = naiveBayes(truePosition~.,dataTrain)
bayesAccuracy <- sum(predict(nb, dataTest)==dataTest$truePosition) / nrow(dataTest)
bayesPredictedProbabilities <- predict(nb, dataTest,"raw")
bayesPred <- prediction( bayesPredictedProbabilities[,2], dataTest$truePosition)
bayesPerfROC <- performance(bayesPred,"tpr","fpr")
############## Naive Bayes   ##############
nb = naiveBayes(truePosition~.,dataTrain)
bayesAccuracy <- sum(predict(nb, dataTest)==dataTest$truePosition) / nrow(dataTest)
bayesPredictedProbabilities <- predict(nb, dataTest,"raw")
bayesPred <- prediction( bayesPredictedProbabilities[,2], dataTest$truePosition)
bayesPred <- prediction( bayesPredictedProbabilities[,2], dataTest$truePosition)
bayesPred <- prediction( bayesPredictedProbabilities[,2], dataTest$truePosition)
nb = naiveBayes(truePosition~.,dataTrain)
bayesAccuracy <- sum(predict(nb, dataTest)==dataTest$truePosition) / nrow(dataTest)
bayesPredictedProbabilities <- predict(nb, dataTest,"raw")
bayesPred <- prediction( bayesPredictedProbabilities[,2], dataTest$truePosition)
unload(ROCR)
library.unload(ROCR)
library(vegan)
library(survival)
library(bnlearn)
library(dplyr)
library(ggplot2)
library(lattice)
library(mice)
library(tableone)
library(caret)
library(rpart)
library(e1071)
bayesPred <- prediction( bayesPredictedProbabilities[,2], dataTest$truePosition)
tan = tree.bayes(tanTrain, "truePosition")
fittedTan = bn.fit(tan, tanTrain)
tan = tree.bayes(tanTrain, "truePosition")
fittedTan = bn.fit(tan, tanTrain)
tanAccuracy <- (sum(predict(object=fittedTan, data=tanTest)==tanTest$truePosition)) / nrow(tanTest)
tan = tree.bayes(data.frame(tanTrain), "truePosition")
tree <- rpart(truePosition~ .,
data=dataTrain,
method="class")
dtAccuracy <- (sum(predict(tree, dataTest, type="class")==dataTest$truePosition)) / nrow(dataTest)
dtPredictedProbabilities <- predict(tree, dataTest, type = "prob")
dtPred <- prediction( dtPredictedProbabilities[,2], dataTest$truePosition)
View(dtPredictedProbabilities)
nb = naiveBayes(truePosition~.,dataTrain)
bayesAccuracy <- sum(predict(nb, dataTest)==dataTest$truePosition) / nrow(dataTest)
predict(nb, dataTest)
dataTest
nb = naiveBayes(truePosition~.,dataTrain)
bayesAccuracy <- sum(predict(nb, dataTest)==dataTest$truePosition) / nrow(dataTest)
bayesAccuracy
predict(nb, dataTest)
dataTest
nb
predict(nb, data)
dataTest$truePosition
dataTrain$truePosition
sum(predict(nb, dataTest)==dataTest$truePosition)
sum(predict(nb, dataTest)==1)
sum(predict(nb, dataTest)==2)
sum(predict(nb, dataTest)==3)
sum(predict(nb, dataTest)==4)
sum(predict(nb, dataTest)==5)
sum(predict(nb, dataTest)==6)
sum(predict(nb, dataTest)==7)
sum(predict(nb, dataTest)==0)
sum(predict(nb, dataTest))
data <- read.csv("features.csv")
data
data$truePosition <- as.factor(data$truePosition)
dataTrain = data[seq(1,nrow(data),2),]
dataTest = data[seq(2,nrow(data),2),]
tanTrain <- dataTrain[ ,sapply(dataTrain, is.factor)]
tanTest <- dataTest[ ,sapply(dataTest, is.factor)]
nb = naiveBayes(truePosition~.,dataTrain)
bayesAccuracy <- sum(predict(nb, dataTest)==dataTest$truePosition) / nrow(dataTest)
bayesPredictedProbabilities <- predict(nb, dataTest,"raw")
bayesAccuracy
bayesPred <- prediction( bayesPredictedProbabilities[,2], dataTest$truePosition)
bayesPredictedProbabilities <- predict(nb, dataTest,"raw")
tan = tree.bayes(tanTrain, "truePosition")
data <- read.csv("features.csv")
data
data$truePosition <- as.factor(data$truePosition)
dataTrain <- dataTrain[-c(which( colnames(dataTest)=="id"))]
dataTrain = data[seq(1,nrow(data),2),]
dataTest = data[seq(2,nrow(data),2),]
tanTrain <- dataTrain[ ,sapply(dataTrain, is.factor)]
tanTest <- dataTest[ ,sapply(dataTest, is.factor)]
nb = naiveBayes(truePosition~.,dataTrain)
bayesAccuracy <- sum(predict(nb, dataTest)==dataTest$truePosition) / nrow(dataTest)
bayesPredictedProbabilities <- predict(nb, dataTest,"raw")
bayesPred <- prediction( bayesPredictedProbabilities[,2], dataTest$truePosition)
tan = tree.bayes(tanTrain, "truePosition")
dataTrain
data <- read.csv("features.csv")
data
data$truePosition <- as.factor(data$truePosition)
data <- data[-c(which( colnames(dataTest)=="id"))]
dataTrain = data[seq(1,nrow(data),2),]
dataTest = data[seq(2,nrow(data),2),]
tanTrain <- dataTrain[ ,sapply(dataTrain, is.factor)]
tanTest <- dataTest[ ,sapply(dataTest, is.factor)]
nb = naiveBayes(truePosition~.,dataTrain)
bayesAccuracy <- sum(predict(nb, dataTest)==dataTest$truePosition) / nrow(dataTest)
bayesPredictedProbabilities <- predict(nb, dataTest,"raw")
tan = tree.bayes(tanTrain, "truePosition")
fittedTan = bn.fit(tan, tanTrain)
tree <- rpart(truePosition~ .,
data=dataTrain,
method="class")
dtAccuracy <- (sum(predict(tree, dataTest, type="class")==dataTest$truePosition)) / nrow(dataTest)
dtPredictedProbabilities <- predict(tree, dataTest, type = "prob")
dtAccuracy
tanAccuracy <- (sum(predict(object=fittedTan, data=tanTest)==tanTest$truePosition)) / nrow(tanTest)
tan = tree.bayes(tanTrain, "truePosition")
n <- nrow(dataTest)
dtAccuracyInCI <-  paste(toString(dtAccuracy-1.96*sqrt(dtAccuracy*(1-dtAccuracy)/n)),
toString(dtAccuracy+1.96*sqrt(dtAccuracy*(1-dtAccuracy)/n)),sep="; ")
tanAccuracyInCI <- paste(toString(tanAccuracy-1.96*sqrt(tanAccuracy*(1-tanAccuracy)/n)),
toString(tanAccuracy+1.96*sqrt(tanAccuracy*(1-tanAccuracy)/n)), sep="; ")
bayesAccuracyInCI <- paste(toString(bayesAccuracy-1.96*sqrt(bayesAccuracy*(1-bayesAccuracy)/n)),
toString(bayesAccuracy+1.96*sqrt(bayesAccuracy*(1-bayesAccuracy)/n)), sep="; ")
accuracyComparisonMatrix <- matrix(c(dtAccuracyInCI,lrAccuracyInCI,tanAccuracyInCI,bayesAccuracyInCI),ncol=4,byrow=TRUE)
accuracyComparisonMatrix <- matrix(c(dtAccuracyInCI,tanAccuracyInCI,bayesAccuracyInCI),ncol=4,byrow=TRUE)
colnames(accuracyComparisonMatrix) <- c("Decision Tree", "Tree Augmented Naive Bayes", "Naive Bayes")
rownames(accuracyComparisonMatrix) <- c("Accuracy")
accuracyComparisonMatrix <- matrix(c(dtAccuracyInCI,tanAccuracyInCI,bayesAccuracyInCI),ncol=4,byrow=TRUE)
fittedTan = bn.fit(tan, tanTrain)
tan = tree.bayes(tanTrain, "truePosition")
tanTrain <- dataTrain[ ,sapply(dataTrain, is.factor)]
tanTest <- dataTest[ ,sapply(dataTest, is.factor)]
tan = tree.bayes(tanTrain, "truePosition")
tanTrain
dataTrain
tan = tree.bayes(dataTrain, "truePosition")
nb = naiveBayes(truePosition~.,dataTrain)
bayesAccuracy <- sum(predict(nb, dataTest)==dataTest$truePosition) / nrow(dataTest)
tree <- rpart(truePosition~ .,
data=dataTrain,
method="class")
dtAccuracy <- (sum(predict(tree, dataTest, type="class")==dataTest$truePosition)) / nrow(dataTest)
n <- nrow(dataTest)
dtAccuracyInCI <-  paste(toString(dtAccuracy-1.96*sqrt(dtAccuracy*(1-dtAccuracy)/n)),
toString(dtAccuracy+1.96*sqrt(dtAccuracy*(1-dtAccuracy)/n)),sep="; ")
bayesAccuracyInCI <- paste(toString(bayesAccuracy-1.96*sqrt(bayesAccuracy*(1-bayesAccuracy)/n)),
toString(bayesAccuracy+1.96*sqrt(bayesAccuracy*(1-bayesAccuracy)/n)), sep="; ")
accuracyComparisonMatrix <- matrix(c(dtAccuracyInCI,bayesAccuracyInCI),ncol=4,byrow=TRUE)
colnames(accuracyComparisonMatrix) <- c("Decision Tree", "Naive Bayes")
rownames(accuracyComparisonMatrix) <- c("Accuracy")
accuracyComparisonTable <- as.table(accuracyComparisonMatrix)
accuracyComparisonTable
accuracyComparisonMatrix <- matrix(c(dtAccuracyInCI,bayesAccuracyInCI),ncol=3,byrow=TRUE)
accuracyComparisonMatrix <- matrix(c(dtAccuracyInCI,bayesAccuracyInCI),ncol=2,byrow=TRUE)
colnames(accuracyComparisonMatrix) <- c("Decision Tree", "Naive Bayes")
rownames(accuracyComparisonMatrix) <- c("Accuracy")
accuracyComparisonTable <- as.table(accuracyComparisonMatrix)
accuracyComparisonTable
n <- nrow(dataTest)
dtAccuracyInCI <-  toString(dtAccuracy)
bayesAccuracyInCI <- toString(bayesAccuracy)
accuracyComparisonMatrix <- matrix(c(dtAccuracyInCI,bayesAccuracyInCI),ncol=2,byrow=TRUE)
colnames(accuracyComparisonMatrix) <- c("Decision Tree", "Naive Bayes")
rownames(accuracyComparisonMatrix) <- c("Accuracy")
accuracyComparisonTable <- as.table(accuracyComparisonMatrix)
accuracyComparisonTable
data <- read.csv("features.csv")
data
data$truePosition <- as.factor(data$truePosition)
data <- data[-c(which( colnames(dataTest)=="id"))]
dataTrain = data[seq(1,nrow(data),2),]
dataTest = data[seq(2,nrow(data),2),]
tanTrain <- dataTrain[ ,sapply(dataTrain, is.factor)]
tanTest <- dataTest[ ,sapply(dataTest, is.factor)]
nb = naiveBayes(truePosition~.,dataTrain)
data <- read.csv("features.csv")
data
data$truePosition <- as.factor(data$truePosition)
data <- data[-c(which( colnames(dataTest)=="id"))]
dataTrain = data[seq(1,nrow(data),2),]
dataTest = data[seq(2,nrow(data),2),]
tanTrain <- dataTrain[ ,sapply(dataTrain, is.factor)]
nb = naiveBayes(truePosition~.,dataTrain)
nb = naiveBayes(truePosition ~ . ,dataTrain)
nb = naiveBayes(truePosition ~ . , data = dataTrain)
data <- read.csv("features.csv")
data
data$truePosition <- as.factor(data$truePosition)
data <- data[-c(which( colnames(dataTest)=="id"))]
data <- data[-c(which( colnames(data)=="id"))]
dataTrain = data[seq(1,nrow(data),2),]
dataTest = data[seq(2,nrow(data),2),]
nb = naiveBayes(truePosition ~ . , dataTrain)
bayesAccuracy <- sum(predict(nb, dataTest)==dataTest$truePosition) / nrow(dataTest)
tree <- rpart(truePosition~ .,
data=dataTrain,
method="class")
dtAccuracy <- (sum(predict(tree, dataTest, type="class")==dataTest$truePosition)) / nrow(dataTest)
n <- nrow(dataTest)
dtAccuracyInCI <-  toString(dtAccuracy)
bayesAccuracyInCI <- toString(bayesAccuracy)
accuracyComparisonMatrix <- matrix(c(dtAccuracyInCI,bayesAccuracyInCI),ncol=2,byrow=TRUE)
colnames(accuracyComparisonMatrix) <- c("Decision Tree", "Naive Bayes")
rownames(accuracyComparisonMatrix) <- c("Accuracy")
accuracyComparisonTable <- as.table(accuracyComparisonMatrix)
accuracyComparisonTable
bn
nb
sumary(nb)
summary(nb)
setwd("../Dropbox/CMU/ML/week\ 15/obgyn_sample_cases//")
setwd("../Dropbox/CMU/ML/week 15/obgyn_sample_cases//")
setwd("../Dropbox/CMU/ML/week 15/obgyn_sample_cases/")
setwd("../Dropbox/CMU/ML/week\ 15/obgyn_sample_cases/")
setwd("Users/lukasmohs/Dropbox/CMU/ML/week\ 15/obgyn_sample_cases/")
setwd("Users/lukasmohs/Dropbox/CMU/ML/week 15/obgyn_sample_cases/")
data = read.csv("cleaned-responses.csv")
setwd("Users/lukasmohs/Desktop/Innovation-Analysis/")
setwd("Users/lukasmohs/Desktop/Innovation-Analysis")
setwd("Users/lukasmohs/Desktop/Innovation-Analysis")
data = read.csv("cleaned-responses.csv")
setwd("Users/lukasmohs/Desktop/Innovation-Analysis")
setwd("Users/lukasmohs/Dropbox/CMU/ML/week 15/obgyn_sample_cases/")
setwd("Users/lukasmohs/Desktop/Innovation-Analysis")
setwd("Users/lukasmohs/Desktop/")
setwd("Users/lukasmohs/Dropbox/CMU/ML/week 15/obgyn_sample_cases/")
getwd()
ls
setwd("Users/lukasmohs/Dropbox/")
setwd("Users/lukasmohs/Dropbox")
setwd("Users/lukasmohs/")
setwd("Users")
getwd()
setwd("/Users/lukasmohs/Desktop/")
setwd("/Users/lukasmohs/Desktop/Innovation-Analysis")
getwd()
data = read.csv("cleaned-responses.csv")
setwd("/Users/lukasmohs/Desktop/Innovation-Analysis/")
data = read.csv("cleaned-responses.csv")
ls()
ls
setwd("/Users/lukasmohs/Desktop/Innovation-Analysis/")
ls
ls()
ls()
setwd("/Users/lukasmohs/Desktop/Innovation-Analysis")
ls()
list.dirs()
list.files()
read.csv("cleaned-responses.csv")
setwd("/Users/lukasmohs/Desktop/Innovation-Analysis/")
data = read.csv("cleaned-responses.csv")
data
setwd("/Users/lukasmohs/Desktop/Innovation-Analysis/")
data = read.csv("cleaned-responses.csv")
data
setwd("/Users/lukasmohs/Desktop/Innovation-Analysis/")
data = read.csv("cleaned-responses.csv")
summary(data)
setwd("/Users/lukasmohs/Desktop/Innovation-Analysis/")
data = read.csv("cleaned-responses.csv")
summary(data)
setwd("/Users/lukasmohs/Desktop/Innovation-Analysis/")
data = read.csv("cleaned-responses.csv")
summary(data)
setwd("/Users/lukasmohs/Desktop/Innovation-Analysis/")
data = read.csv("cleaned-responses.csv")
summary(data)
summary(data)
View(data)
setwd("/Users/lukasmohs/Desktop/Innovation-Analysis/")
data = read.csv("cleaned-responses.csv")
setwd("/Users/lukasmohs/Desktop/Innovation-Analysis/")
data = read.csv("cleaned-responses.csv")
summary(data)
View(data)
setwd("/Users/lukasmohs/Desktop/Innovation-Analysis/")
data = read.csv("cleaned-responses-UTF-8.csv")
setwd("/Users/lukasmohs/Desktop/Innovation-Analysis/")
data = read.csv("cleaned-responses-Windows.csv")
setwd("/Users/lukasmohs/Desktop/Innovation-Analysis/")
data = read.csv("cleaned-responses.csv",sep=';')
summary(data)
setwd("/Users/lukasmohs/Desktop/Innovation-Analysis/")
data = read.csv("cleaned-responses.csv",sep=';')
data <- mutate(data, IE = ave(ea,eb,ec,ed,ee))
data <- data.frame(data)
data <- mutate(data, IE = ave(ea,eb,ec,ed,ee))
library(dplyr)
setwd("/Users/lukasmohs/Desktop/Innovation-Analysis/")
data = read.csv("cleaned-responses.csv",sep=';')
summary(data)
data <- mutate(data, IE = ave(ea,eb,ec,ed,ee))
data$IE
data$ea
data$eb
data$ec
data$ed
data$ee
data <- mutate(data, IE = mean(ea,eb,ec,ed,ee))
setwd("/Users/lukasmohs/Desktop/Innovation-Analysis/")
data = read.csv("cleaned-responses.csv",sep=';')
summary(data)
data <- mutate(data, IE = mean(ea,eb,ec,ed,ee))
setwd("/Users/lukasmohs/Desktop/Innovation-Analysis/")
data = read.csv("cleaned-responses.csv",sep=';')
summary(data)
data <- mutate(data, IE = mean(c(ea,eb,ec,ed,ee),trim = 0.10))
data$IE
summary(data)
data <- mutate(data, IE = mean(c(ea,eb,ec,ed,ee), trim = 0))
data <- mutate(data, IE = (ea+eb+ec+ed+ee)/5)
data$IE
fit <- lm(IE ~ . , data=data)
summary(fit) # show results
setwd("/Users/lukasmohs/Desktop/Innovation-Analysis/")
data = read.csv("cleaned-responses.csv",sep=';')
summary(data)
data <- mutate(data, IE = (11a+11b+11c+11d+11e)/5)
data <- mutate(data, IE = (X11a+X11b+X11c+X11d+X11e)/5)
fit <- lm(IE ~ X13a + X13b + X13c + X15a + X15b + X15c + X15d + X15e + X15f , data=data)
summary(fit) # show results
fit <- lm(IE ~ X13a + X13b + X13c + X15a + X15b + X15c + X15d + X15e + X15f + X18a + X18b + X18c + X18d + X18e + X18f , data=data)
summary(fit) # show results
data = read.csv("cleaned-responses.csv",sep=';')
summary(data)
data <- mutate(data, PA = (X11a+X11b+X11c+X11d+X11e)/5)
data <- mutate(data, SN = (X13a+X13b+X13c)/3)
data <- mutate(data, PBC = (X15a + X15b + X15c + X15d + X15e + X15f)/6)
data <- mutate(data, IE = (X18a + X18b + X18c + X18d + X18e + X18f)/6)
summary(data)
data <- mutate(data, PA = (X11a+X11b+X11c+X11d+X11e)/5)
data <- mutate(data, SN = (X13a+X13b+X13c)/3)
data <- mutate(data, PBC = (X15a + X15b + X15c + X15d + X15e + X15f)/6)
data <- mutate(data, IE = (X18a + X18b + X18c + X18d + X18e + X18f)/6)
fit <- lm(IE ~ X11a+X11b+X11c+X11d+X11e + X13a + X13b + X13c + X15a + X15b + X15c + X15d + X15e + X15f, data=data)
summary(fit) # show results
setwd("/Users/lukasmohs/Desktop/Innovation-Analysis/")
data = read.csv("cleaned-responses.csv",sep=';')
summary(data)
data <- mutate(data, PA = (X11a+X11b+X11c+X11d+X11e)/5)
data <- mutate(data, SN = (X13a+X13b+X13c)/3)
data <- mutate(data, PBC = (X15a + X15b + X15c + X15d + X15e + X15f)/6)
data <- mutate(data, IE = (X18a + X18b + X18c + X18d + X18e + X18f)/6)
fit <- lm(IE ~ X11a+X11b+X11c+X11d+X11e + X13a + X13b + X13c + X15a + X15b + X15c + X15d + X15e + X15f, data=data)
summary(fit) # show results
fit <- lm(IE ~ PA + SN + PBC, data=data)
summary(fit) # show results
